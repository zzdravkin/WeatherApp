disabled_rules: # rule identifiers to exclude from running
  - line_length # Documentation can exceed line lengths
  - identifier_name
opt_in_rules: # some rules are only opt-in
  - empty_count
  - force_unwrapping
  - explicit_init
  - first_where
  - object_literal
  - operator_usage_whitespace
  - overridden_super_call # Not sure if this will cause any problems, let's see.
  - private_outlet
  - prohibited_super_call
  - redundant_nil_coalescing
  - switch_case_on_newline
# force_cast: error
force_try: error
force_unwrapping: 
  severity: error
#operator_usage_whitespace: error
syntactic_sugar: error
#trailing_comma: 
#  severity: error
#trailing_newline: error
trailing_semicolon: error
#trailing_whitespace: false
unused_closure_parameter: error
unused_optional_binding: 
  severity: error
#vertical_whitespace: 
#  severity: error
object_literal:
  color_literal: false
#trailing_whitespace:
#  ignores_empty_lines: true # This is such a hassle to do right and adds nothing

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Pods
  - Project/R.generated.swift

custom_rules:
  nslog_prohibted: # rule identifier
    included: ".*.swift" # regex that defines paths to include during linting. optional.
    excluded: ".*(Tests|SnapshotHelper|DataTestCase)\\.swift" # regex that defines paths to exclude during linting. optional
    name: "Use Log instead of NSLog, print, OSLog" # rule name. optional.
    regex: 'NSLog|import os.log|print\(' # matching pattern
    message: "Incorrect logging" # violation message. optional.
    severity: warning # violation severity. optional.

large_tuple: # warn user when using 3 values in tuple, give error if there are 4
   - 3
   - 4
   
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 30
    error: 35
  excluded: iPhone # excluded via string
reporter: "xcode"